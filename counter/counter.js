// Generated by CoffeeScript 1.6.1
(function() {
  var $, Counter;

  $ = jQuery;

  Counter = function() {
    var animateBg, init, reelAnimation, reelNumberAnimation, trackerAnimation;
    init = function() {
      var led, lum;
      led = $('.b-energy-meter__item_led');
      lum = $('.b-energy-meter__item_lum');
      reelAnimation(led, 1800 * 2, 29);
      reelAnimation(lum, 800 * 2, 29);
      trackerAnimation(led, 1800 * 2);
      return trackerAnimation(lum, 800 * 2);
    };
    reelAnimation = function(el, timePerOne, elBgPerOne) {
      var animObj, i, k, numbers, _i, _ref, _results;
      numbers = el.find('.b-energy-reel__numbers');
      k = 10;
      _results = [];
      for (i = _i = _ref = numbers.length - 1; _i >= 0; i = _i += -1) {
        animObj = reelNumberAnimation(numbers.eq(i), timePerOne * k, elBgPerOne * 10);
        animObj.play();
        _results.push(k *= 10);
      }
      return _results;
    };
    reelNumberAnimation = function(el, dur, value) {
      var args, callback, entity;
      entity = void 0;
      callback = function() {
        entity = animateBg.apply(null, args);
        return entity.play();
      };
      args = [el, dur, value, callback];
      return {
        stop: function() {
          return entity.stop();
        },
        play: function() {
          entity = animateBg.apply(null, args);
          return entity.play();
        }
      };
    };
    trackerAnimation = function(el, time) {
      var animate, elTrackW, elTracker, elTrackerW;
      elTracker = el.find('.b-energy-meter__tracker');
      elTrackerW = elTracker.width();
      elTrackW = el.find('.b-energy-meter__track').width();
      animate = function() {
        return elTracker.stop().css('left', -elTrackerW).animate({
          left: elTrackW + elTrackerW
        }, time, animate);
      };
      return animate();
    };
    animateBg = function(el, duration, value, callback) {
      var bgPos, currentValue, interval, prevValue, startTime, startValue, tick, x, y;
      bgPos = el.css('backgroundPosition').split(' ');
      x = parseInt(bgPos[0]);
      y = parseInt(bgPos[1]);
      startValue = y;
      startTime = (new Date()).getTime();
      interval = void 0;
      prevValue = void 0;
      currentValue = void 0;
      tick = function() {
        var currentTime, percent, remaining, temp;
        prevValue = currentValue;
        currentTime = (new Date()).getTime();
        remaining = Math.max(0, startTime + duration - currentTime);
        temp = remaining / duration || 0;
        percent = 1 - temp;
        currentValue = (startValue + value * percent).toFixed(1);
        currentValue = parseFloat(currentValue);
        if (currentValue !== prevValue) {
          el[0].style.backgroundPosition = x + 'px ' + currentValue + 'px';
        }
        if (percent < 1) {

        } else {
          clearInterval(interval);
          return callback && callback();
        }
      };
      return {
        play: function() {
          return interval = setInterval(tick, 13);
        },
        stop: function() {
          return clearInterval(interval);
        }
      };
    };
    return init();
  };

  $(document).ready(Counter);

}).call(this);
